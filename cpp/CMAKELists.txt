project(tutorial)

cmake_minimum_required(VERSION 3.0)

set(CMAKE_CXX_STANDARD 17)

set(SENSING_DEV_DIR $ENV{SENSING_DEV_ROOT})

# opencv ion and halide
include_directories(${SENSING_DEV_DIR}/include)
link_directories(${SENSING_DEV_DIR}/bin)
link_directories(${SENSING_DEV_DIR}/lib)

include_directories(${SENSING_DEV_DIR}/include/aravis-0.8)
include_directories(${SENSING_DEV_DIR}/include/glib-2.0)

# tutorial 0
set(T0 src/tutorial0_get_device_info.cpp)
add_executable(tutorial0_get_device_info ${T0})
target_compile_features(tutorial0_get_device_info PUBLIC cxx_std_17)

target_link_libraries(tutorial0_get_device_info PRIVATE aravis-0.8.lib)
target_link_libraries(tutorial0_get_device_info PRIVATE gobject-2.0.lib)

# tutorial 1
set(T1 src/tutorial1_display.cpp)
add_executable(tutorial1_display ${T1})
target_compile_features(tutorial1_display PUBLIC cxx_std_17)

target_link_libraries(tutorial1_display PRIVATE opencv_world455.lib)
target_link_libraries(tutorial1_display PRIVATE ion-core.lib)
target_link_libraries(tutorial1_display PRIVATE halide.lib)

# tutorial 2
set(T2 src/tutorial2_control_camera.cpp)
add_executable(tutorial2_control_camera ${T2})
target_compile_features(tutorial2_control_camera PUBLIC cxx_std_17)

target_link_libraries(tutorial2_control_camera PRIVATE opencv_world455.lib)
target_link_libraries(tutorial2_control_camera PRIVATE ion-core.lib)
target_link_libraries(tutorial2_control_camera PRIVATE halide.lib)

# tutorial 3
set(T3 src/tutorial3_getting_frame_count.cpp)
add_executable(tutorial3_getting_frame_count ${T3})
target_compile_features(tutorial3_getting_frame_count PUBLIC cxx_std_17)

target_link_libraries(tutorial3_getting_frame_count PRIVATE opencv_world455.lib)
target_link_libraries(tutorial3_getting_frame_count PRIVATE ion-core.lib)
target_link_libraries(tutorial3_getting_frame_count PRIVATE halide.lib)

#
# Allow big object
#
if (MSVC)
    add_definitions(/bigobj)
    message(STATUS "Allow big object")
endif (MSVC)